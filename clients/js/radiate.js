// Generated by CoffeeScript 1.3.3
(function() {
  var Radiate;

  Radiate = (function() {

    function Radiate(server, pusher_key) {
      this.server = server;
      this.pusher_key = pusher_key;
      this.pusher = new Pusher(pusher_key);
      this.channel = this.pusher.subscribe('updates');
    }

    Radiate.prototype.onupdate = function(key, callback) {
      return this.channel.bind("update:" + key, callback);
    };

    Radiate.prototype.xhr = function(method, key, data, callback) {
      var senddata, xhr;
      method = method.toUpperCase();
      if (!(callback != null) && typeof data === "function") {
        callback = data;
        data = null;
      }
      xhr = new XMLHttpRequest();
      xhr.open(method, "" + this.server + "/" + key, true);
      if (method !== "GET") {
        xhr.setRequestHeader('Content-Type', 'application/json');
      }
      xhr.onreadystatechange = function() {
        var response;
        if (xhr.readyState !== 4) {
          return;
        }
        response = JSON.parse(xhr.responseText);
        if (typeof callback === "function") {
          return callback(response);
        }
      };
      senddata = method === "GET" ? null : JSON.stringify(data);
      return xhr.send(senddata);
    };

    Radiate.prototype.get = function(key, callback) {
      return this.xhr('GET', key, callback);
    };

    Radiate.prototype.set = function(key, value, callback) {
      if (!typeof value === 'object') {
        value = {
          _value: value
        };
      }
      return this.xhr('PUT', key, value, callback);
    };

    Radiate.prototype.incr = function(key, callback) {
      return this.xhr('PUT', key, {
        _action: 'INCR'
      }, callback);
    };

    Radiate.prototype.decr = function(key, callback) {
      return this.xhr('PUT', key, {
        _action: 'DECR'
      }, callback);
    };

    return Radiate;

  })();

  window.radiate = new Radiate('__RADIATE_SERVER__', '__PUSHER_KEY__');

  if (jQuery) {
    jQuery.fn.radiate = function(key) {
      var $elem;
      $elem = this;
      key = key || $elem.data('radiate-key');
      if (key) {
        radiate.get(key, function(data) {
          return $elem.text(data.value);
        });
        return radiate.onupdate(key, function(data) {
          return $elem.text(data.value);
        });
      } else {
        return console.warn('No key given');
      }
    };
  }

}).call(this);
